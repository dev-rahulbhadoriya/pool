{"ast":null,"code":"import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'heures',\n  minutes: 'minutes',\n  seconds: 'secondes'\n};\nconst frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'La vue année est ouverte, ouvrir la vue calendrier' : 'La vue calendrier est ouverte, ouvrir la vue année',\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\",\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Choix des ${views[view]}. ${time === null ? 'Aucune heure choisie' : `L'heure choisie est ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} heures`,\n  minutesClockNumberText: minutes => `${minutes} minutes`,\n  secondsClockNumberText: seconds => `${seconds} secondes`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir la date, la date sélectionnée est ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choisir la date',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir l'heure, l'heure sélectionnée est ${utils.format(utils.date(rawValue), 'fullTime')}` : \"Choisir l'heure\",\n  // Table labels\n  timeTableLabel: \"choix de l'heure\",\n  dateTableLabel: 'choix de la date'\n};\nexport const frFR = getPickersLocalization(frFRPickers);","map":{"version":3,"sources":["/home/rahul/Rahul_workspace/pool/node_modules/@mui/x-date-pickers/locales/frFR.js"],"names":["getPickersLocalization","views","hours","minutes","seconds","frFRPickers","previousMonth","nextMonth","openPreviousView","openNextView","calendarViewSwitchingButtonAriaLabel","view","start","end","cancelButtonLabel","clearButtonLabel","okButtonLabel","todayButtonLabel","clockLabelText","time","adapter","format","hoursClockNumberText","minutesClockNumberText","secondsClockNumberText","openDatePickerDialogue","rawValue","utils","isValid","date","openTimePickerDialogue","timeTableLabel","dateTableLabel","frFR"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,gCAAvC;AACA,MAAMC,KAAK,GAAG;AACZC,EAAAA,KAAK,EAAE,QADK;AAEZC,EAAAA,OAAO,EAAE,SAFG;AAGZC,EAAAA,OAAO,EAAE;AAHG,CAAd;AAKA,MAAMC,WAAW,GAAG;AAClB;AACAC,EAAAA,aAAa,EAAE,gBAFG;AAGlBC,EAAAA,SAAS,EAAE,cAHO;AAIlB;AACAC,EAAAA,gBAAgB,EAAE,0BALA;AAMlBC,EAAAA,YAAY,EAAE,wBANI;AAOlBC,EAAAA,oCAAoC,EAAEC,IAAI,IAAIA,IAAI,KAAK,MAAT,GAAkB,oDAAlB,GAAyE,oDAPrG;AAQlB;AACAC,EAAAA,KAAK,EAAE,OATW;AAUlBC,EAAAA,GAAG,EAAE,KAVa;AAWlB;AACAC,EAAAA,iBAAiB,EAAE,SAZD;AAalBC,EAAAA,gBAAgB,EAAE,OAbA;AAclBC,EAAAA,aAAa,EAAE,IAdG;AAelBC,EAAAA,gBAAgB,EAAE,aAfA;AAgBlB;AACAC,EAAAA,cAAc,EAAE,CAACP,IAAD,EAAOQ,IAAP,EAAaC,OAAb,KAA0B,aAAYnB,KAAK,CAACU,IAAD,CAAO,KAAIQ,IAAI,KAAK,IAAT,GAAgB,sBAAhB,GAA0C,uBAAsBC,OAAO,CAACC,MAAR,CAAeF,IAAf,EAAqB,UAArB,CAAiC,EAAE,EAjBvJ;AAkBlBG,EAAAA,oBAAoB,EAAEpB,KAAK,IAAK,GAAEA,KAAM,SAlBtB;AAmBlBqB,EAAAA,sBAAsB,EAAEpB,OAAO,IAAK,GAAEA,OAAQ,UAnB5B;AAoBlBqB,EAAAA,sBAAsB,EAAEpB,OAAO,IAAK,GAAEA,OAAQ,WApB5B;AAqBlB;AACAqB,EAAAA,sBAAsB,EAAE,CAACC,QAAD,EAAWC,KAAX,KAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,GAAmD,6CAA4CC,KAAK,CAACN,MAAN,CAAaM,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA+C,EAA9I,GAAkJ,iBAtB7K;AAuBlBI,EAAAA,sBAAsB,EAAE,CAACJ,QAAD,EAAWC,KAAX,KAAqBD,QAAQ,IAAIC,KAAK,CAACC,OAAN,CAAcD,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAd,CAAZ,GAAmD,6CAA4CC,KAAK,CAACN,MAAN,CAAaM,KAAK,CAACE,IAAN,CAAWH,QAAX,CAAb,EAAmC,UAAnC,CAA+C,EAA9I,GAAkJ,iBAvB7K;AAwBlB;AACAK,EAAAA,cAAc,EAAE,kBAzBE;AA0BlBC,EAAAA,cAAc,EAAE;AA1BE,CAApB;AA4BA,OAAO,MAAMC,IAAI,GAAGjC,sBAAsB,CAACK,WAAD,CAAnC","sourcesContent":["import { getPickersLocalization } from './utils/getPickersLocalization';\nconst views = {\n  hours: 'heures',\n  minutes: 'minutes',\n  seconds: 'secondes'\n};\nconst frFRPickers = {\n  // Calendar navigation\n  previousMonth: 'Mois précédent',\n  nextMonth: 'Mois suivant',\n  // View navigation\n  openPreviousView: 'Ouvrir la vue précédente',\n  openNextView: 'Ouvrir la vue suivante',\n  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'La vue année est ouverte, ouvrir la vue calendrier' : 'La vue calendrier est ouverte, ouvrir la vue année',\n  // DateRange placeholders\n  start: 'Début',\n  end: 'Fin',\n  // Action bar\n  cancelButtonLabel: 'Annuler',\n  clearButtonLabel: 'Vider',\n  okButtonLabel: 'OK',\n  todayButtonLabel: \"Aujourd'hui\",\n  // Clock labels\n  clockLabelText: (view, time, adapter) => `Choix des ${views[view]}. ${time === null ? 'Aucune heure choisie' : `L'heure choisie est ${adapter.format(time, 'fullTime')}`}`,\n  hoursClockNumberText: hours => `${hours} heures`,\n  minutesClockNumberText: minutes => `${minutes} minutes`,\n  secondsClockNumberText: seconds => `${seconds} secondes`,\n  // Open picker labels\n  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir la date, la date sélectionnée est ${utils.format(utils.date(rawValue), 'fullDate')}` : 'Choisir la date',\n  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir l'heure, l'heure sélectionnée est ${utils.format(utils.date(rawValue), 'fullTime')}` : \"Choisir l'heure\",\n  // Table labels\n  timeTableLabel: \"choix de l'heure\",\n  dateTableLabel: 'choix de la date'\n};\nexport const frFR = getPickersLocalization(frFRPickers);"]},"metadata":{},"sourceType":"module"}