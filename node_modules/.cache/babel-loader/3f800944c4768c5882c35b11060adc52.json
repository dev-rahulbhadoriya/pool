{"ast":null,"code":"/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\nimport { getData } from './include.js';\nconst r = getData();\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js'; // @TODO: This should be lazily loaded\n\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r); //const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\n\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\n\nfunction explode_cp(name) {\n  return toUtf8CodePoints(name);\n}\n\nfunction filter_fe0f(cps) {\n  return cps.filter(cp => cp != 0xFE0F);\n}\n\nexport function ens_normalize_post_check(name) {\n  for (let label of name.split('.')) {\n    let cps = explode_cp(label);\n\n    try {\n      for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n        if (cps[i] !== UNDERSCORE) {\n          throw new Error(`underscore only allowed at start`);\n        }\n      }\n\n      if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n        throw new Error(`invalid label extension`);\n      }\n    } catch (err) {\n      throw new Error(`Invalid label \"${label}\": ${err.message}`);\n    }\n  }\n\n  return name;\n}\nexport function ens_normalize(name) {\n  return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\n\nfunction normalize(name, emoji_filter) {\n  let input = explode_cp(name).reverse(); // flip for pop\n\n  let output = [];\n\n  while (input.length) {\n    let emoji = consume_emoji_reversed(input);\n\n    if (emoji) {\n      output.push(...emoji_filter(emoji));\n      continue;\n    }\n\n    let cp = input.pop();\n\n    if (VALID.has(cp)) {\n      output.push(cp);\n      continue;\n    }\n\n    if (IGNORED.has(cp)) {\n      continue;\n    }\n\n    let cps = MAPPED[cp];\n\n    if (cps) {\n      output.push(...cps);\n      continue;\n    }\n\n    throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n  }\n\n  return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\n\nfunction nfc(s) {\n  return s.normalize('NFC');\n}\n\nfunction consume_emoji_reversed(cps, eaten) {\n  var _a;\n\n  let node = EMOJI_ROOT;\n  let emoji;\n  let saved;\n  let stack = [];\n  let pos = cps.length;\n  if (eaten) eaten.length = 0; // clear input buffer (if needed)\n\n  while (pos) {\n    let cp = cps[--pos];\n    node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n    if (!node) break;\n\n    if (node.save) {\n      // remember\n      saved = cp;\n    } else if (node.check) {\n      // check exclusion\n      if (cp === saved) break;\n    }\n\n    stack.push(cp);\n\n    if (node.fe0f) {\n      stack.push(0xFE0F);\n      if (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n    }\n\n    if (node.valid) {\n      // this is a valid emoji (so far)\n      emoji = stack.slice(); // copy stack\n\n      if (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n\n      if (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n\n      cps.length = pos; // truncate\n    }\n  }\n\n  return emoji;\n}","map":{"version":3,"sources":["../../src.ts/ens-normalize/lib.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\nimport { getData } from './include.js';\nconst r = getData();\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js';\n// @TODO: This should be lazily loaded\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n    return toUtf8CodePoints(name);\n}\nfunction filter_fe0f(cps) {\n    return cps.filter(cp => cp != 0xFE0F);\n}\nexport function ens_normalize_post_check(name) {\n    for (let label of name.split('.')) {\n        let cps = explode_cp(label);\n        try {\n            for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n                if (cps[i] !== UNDERSCORE) {\n                    throw new Error(`underscore only allowed at start`);\n                }\n            }\n            if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n                throw new Error(`invalid label extension`);\n            }\n        }\n        catch (err) {\n            throw new Error(`Invalid label \"${label}\": ${err.message}`);\n        }\n    }\n    return name;\n}\nexport function ens_normalize(name) {\n    return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n    let input = explode_cp(name).reverse(); // flip for pop\n    let output = [];\n    while (input.length) {\n        let emoji = consume_emoji_reversed(input);\n        if (emoji) {\n            output.push(...emoji_filter(emoji));\n            continue;\n        }\n        let cp = input.pop();\n        if (VALID.has(cp)) {\n            output.push(cp);\n            continue;\n        }\n        if (IGNORED.has(cp)) {\n            continue;\n        }\n        let cps = MAPPED[cp];\n        if (cps) {\n            output.push(...cps);\n            continue;\n        }\n        throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n    }\n    return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\nfunction nfc(s) {\n    return s.normalize('NFC');\n}\nfunction consume_emoji_reversed(cps, eaten) {\n    var _a;\n    let node = EMOJI_ROOT;\n    let emoji;\n    let saved;\n    let stack = [];\n    let pos = cps.length;\n    if (eaten)\n        eaten.length = 0; // clear input buffer (if needed)\n    while (pos) {\n        let cp = cps[--pos];\n        node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n        if (!node)\n            break;\n        if (node.save) { // remember\n            saved = cp;\n        }\n        else if (node.check) { // check exclusion\n            if (cp === saved)\n                break;\n        }\n        stack.push(cp);\n        if (node.fe0f) {\n            stack.push(0xFE0F);\n            if (pos > 0 && cps[pos - 1] == 0xFE0F)\n                pos--; // consume optional FE0F\n        }\n        if (node.valid) { // this is a valid emoji (so far)\n            emoji = stack.slice(); // copy stack\n            if (node.valid == 2)\n                emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n            if (eaten)\n                eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n            cps.length = pos; // truncate\n        }\n    }\n    return emoji;\n}\n//# sourceMappingURL=lib.js.map"]},"metadata":{},"sourceType":"module"}