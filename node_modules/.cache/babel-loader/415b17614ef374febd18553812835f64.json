{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport const usePickerState = (props, valueManager) => {\n  const {\n    onAccept,\n    onChange,\n    value,\n    closeOnSelect\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n  const parsedDateValue = React.useMemo(() => valueManager.parseInput(utils, value), [valueManager, utils, value]);\n  const [lastValidDateValue, setLastValidDateValue] = React.useState(parsedDateValue);\n  const [dateState, setDateState] = React.useState(() => ({\n    committed: parsedDateValue,\n    draft: parsedDateValue,\n    resetFallback: parsedDateValue\n  }));\n  const setDate = React.useCallback(params => {\n    setDateState(prev => {\n      switch (params.action) {\n        case 'setAll':\n        case 'acceptAndClose':\n          {\n            return {\n              draft: params.value,\n              committed: params.value,\n              resetFallback: params.value\n            };\n          }\n\n        case 'setCommitted':\n          {\n            return _extends({}, prev, {\n              draft: params.value,\n              committed: params.value\n            });\n          }\n\n        case 'setDraft':\n          {\n            return _extends({}, prev, {\n              draft: params.value\n            });\n          }\n\n        default:\n          {\n            return prev;\n          }\n      }\n    });\n\n    if (params.forceOnChangeCall || !params.skipOnChangeCall && !valueManager.areValuesEqual(utils, dateState.committed, params.value)) {\n      onChange(params.value);\n    }\n\n    if (params.action === 'acceptAndClose') {\n      setIsOpen(false);\n\n      if (onAccept && !valueManager.areValuesEqual(utils, dateState.resetFallback, params.value)) {\n        onAccept(params.value);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen, dateState, utils, valueManager]);\n  React.useEffect(() => {\n    if (utils.isValid(parsedDateValue)) {\n      setLastValidDateValue(parsedDateValue);\n    }\n  }, [utils, parsedDateValue]);\n  React.useEffect(() => {\n    if (isOpen) {\n      // Update all dates in state to equal the current prop value\n      setDate({\n        action: 'setAll',\n        value: parsedDateValue,\n        skipOnChangeCall: true\n      });\n    }\n  }, [isOpen]); // eslint-disable-line react-hooks/exhaustive-deps\n  // Set the draft and committed date to equal the new prop value.\n\n  if (!valueManager.areValuesEqual(utils, dateState.committed, parsedDateValue)) {\n    setDate({\n      action: 'setCommitted',\n      value: parsedDateValue,\n      skipOnChangeCall: true\n    });\n  }\n\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => {\n      // Reset all date in state to the empty value and close picker.\n      setDate({\n        value: valueManager.emptyValue,\n        action: 'acceptAndClose',\n        // force `onChange` in cases like input (value) === `Invalid date`\n        forceOnChangeCall: !valueManager.areValuesEqual(utils, value, valueManager.emptyValue)\n      });\n    },\n    onAccept: () => {\n      // Set all date in state to equal the current draft value and close picker.\n      setDate({\n        value: dateState.draft,\n        action: 'acceptAndClose',\n        // force `onChange` in cases like input (value) === `Invalid date`\n        forceOnChangeCall: !valueManager.areValuesEqual(utils, value, parsedDateValue)\n      });\n    },\n    onDismiss: () => {\n      // Set all dates in state to equal the last committed date.\n      // e.g. Reset the state to the last committed value.\n      setDate({\n        value: dateState.committed,\n        action: 'acceptAndClose'\n      });\n    },\n    onCancel: () => {\n      // Set all dates in state to equal the last accepted date and close picker.\n      // e.g. Reset the state to the last accepted value\n      setDate({\n        value: dateState.resetFallback,\n        action: 'acceptAndClose'\n      });\n    },\n    onSetToday: () => {\n      // Set all dates in state to equal today and close picker.\n      setDate({\n        value: valueManager.getTodayValue(utils),\n        action: 'acceptAndClose'\n      });\n    }\n  }), [setDate, isOpen, utils, dateState, valueManager, value, parsedDateValue]); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, because we are just showing text field\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const pickerProps = React.useMemo(() => ({\n    parsedValue: dateState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: function (newDate, wrapperVariant) {\n      let selectionState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'partial';\n\n      switch (selectionState) {\n        case 'shallow':\n          {\n            // Update the `draft` state but do not fire `onChange`\n            return setDate({\n              action: 'setDraft',\n              value: newDate,\n              skipOnChangeCall: true\n            });\n          }\n\n        case 'partial':\n          {\n            // Update the `draft` state and fire `onChange`\n            return setDate({\n              action: 'setDraft',\n              value: newDate\n            });\n          }\n\n        case 'finish':\n          {\n            if (closeOnSelect != null ? closeOnSelect : wrapperVariant === 'desktop') {\n              // Set all dates in state to equal the new date and close picker.\n              return setDate({\n                value: newDate,\n                action: 'acceptAndClose'\n              });\n            } // Updates the `committed` state and fire `onChange`\n\n\n            return setDate({\n              value: newDate,\n              action: 'setCommitted'\n            });\n          }\n\n        default:\n          {\n            throw new Error('MUI: Invalid selectionState passed to `onDateChange`');\n          }\n      }\n    }\n  }), [setDate, isMobileKeyboardViewOpen, dateState.draft, closeOnSelect]);\n  const handleInputChange = React.useCallback((newParsedValue, keyboardInputValue) => {\n    const cleanParsedValue = valueManager.valueReducer ? valueManager.valueReducer(utils, lastValidDateValue, newParsedValue) : newParsedValue;\n    onChange(cleanParsedValue, keyboardInputValue);\n  }, [onChange, valueManager, lastValidDateValue, utils]);\n  const inputProps = React.useMemo(() => ({\n    onChange: handleInputChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [handleInputChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      dateState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n};","map":{"version":3,"sources":["/home/rahul/Rahul_workspace/pool/node_modules/@mui/x-date-pickers/internals/hooks/usePickerState.js"],"names":["_extends","React","useOpenState","useUtils","usePickerState","props","valueManager","onAccept","onChange","value","closeOnSelect","utils","isOpen","setIsOpen","parsedDateValue","useMemo","parseInput","lastValidDateValue","setLastValidDateValue","useState","dateState","setDateState","committed","draft","resetFallback","setDate","useCallback","params","prev","action","forceOnChangeCall","skipOnChangeCall","areValuesEqual","useEffect","isValid","wrapperProps","open","onClear","emptyValue","onDismiss","onCancel","onSetToday","getTodayValue","isMobileKeyboardViewOpen","setMobileKeyboardViewOpen","pickerProps","parsedValue","toggleMobileKeyboardView","onDateChange","newDate","wrapperVariant","selectionState","Error","handleInputChange","newParsedValue","keyboardInputValue","cleanParsedValue","valueReducer","inputProps","rawValue","openPicker","pickerState","useDebugValue","MuiPickerState","other"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useOpenState } from './useOpenState';\nimport { useUtils } from './useUtils';\nexport const usePickerState = (props, valueManager) => {\n  const {\n    onAccept,\n    onChange,\n    value,\n    closeOnSelect\n  } = props;\n  const utils = useUtils();\n  const {\n    isOpen,\n    setIsOpen\n  } = useOpenState(props);\n  const parsedDateValue = React.useMemo(() => valueManager.parseInput(utils, value), [valueManager, utils, value]);\n  const [lastValidDateValue, setLastValidDateValue] = React.useState(parsedDateValue);\n  const [dateState, setDateState] = React.useState(() => ({\n    committed: parsedDateValue,\n    draft: parsedDateValue,\n    resetFallback: parsedDateValue\n  }));\n  const setDate = React.useCallback(params => {\n    setDateState(prev => {\n      switch (params.action) {\n        case 'setAll':\n        case 'acceptAndClose':\n          {\n            return {\n              draft: params.value,\n              committed: params.value,\n              resetFallback: params.value\n            };\n          }\n\n        case 'setCommitted':\n          {\n            return _extends({}, prev, {\n              draft: params.value,\n              committed: params.value\n            });\n          }\n\n        case 'setDraft':\n          {\n            return _extends({}, prev, {\n              draft: params.value\n            });\n          }\n\n        default:\n          {\n            return prev;\n          }\n      }\n    });\n\n    if (params.forceOnChangeCall || !params.skipOnChangeCall && !valueManager.areValuesEqual(utils, dateState.committed, params.value)) {\n      onChange(params.value);\n    }\n\n    if (params.action === 'acceptAndClose') {\n      setIsOpen(false);\n\n      if (onAccept && !valueManager.areValuesEqual(utils, dateState.resetFallback, params.value)) {\n        onAccept(params.value);\n      }\n    }\n  }, [onAccept, onChange, setIsOpen, dateState, utils, valueManager]);\n  React.useEffect(() => {\n    if (utils.isValid(parsedDateValue)) {\n      setLastValidDateValue(parsedDateValue);\n    }\n  }, [utils, parsedDateValue]);\n  React.useEffect(() => {\n    if (isOpen) {\n      // Update all dates in state to equal the current prop value\n      setDate({\n        action: 'setAll',\n        value: parsedDateValue,\n        skipOnChangeCall: true\n      });\n    }\n  }, [isOpen]); // eslint-disable-line react-hooks/exhaustive-deps\n  // Set the draft and committed date to equal the new prop value.\n\n  if (!valueManager.areValuesEqual(utils, dateState.committed, parsedDateValue)) {\n    setDate({\n      action: 'setCommitted',\n      value: parsedDateValue,\n      skipOnChangeCall: true\n    });\n  }\n\n  const wrapperProps = React.useMemo(() => ({\n    open: isOpen,\n    onClear: () => {\n      // Reset all date in state to the empty value and close picker.\n      setDate({\n        value: valueManager.emptyValue,\n        action: 'acceptAndClose',\n        // force `onChange` in cases like input (value) === `Invalid date`\n        forceOnChangeCall: !valueManager.areValuesEqual(utils, value, valueManager.emptyValue)\n      });\n    },\n    onAccept: () => {\n      // Set all date in state to equal the current draft value and close picker.\n      setDate({\n        value: dateState.draft,\n        action: 'acceptAndClose',\n        // force `onChange` in cases like input (value) === `Invalid date`\n        forceOnChangeCall: !valueManager.areValuesEqual(utils, value, parsedDateValue)\n      });\n    },\n    onDismiss: () => {\n      // Set all dates in state to equal the last committed date.\n      // e.g. Reset the state to the last committed value.\n      setDate({\n        value: dateState.committed,\n        action: 'acceptAndClose'\n      });\n    },\n    onCancel: () => {\n      // Set all dates in state to equal the last accepted date and close picker.\n      // e.g. Reset the state to the last accepted value\n      setDate({\n        value: dateState.resetFallback,\n        action: 'acceptAndClose'\n      });\n    },\n    onSetToday: () => {\n      // Set all dates in state to equal today and close picker.\n      setDate({\n        value: valueManager.getTodayValue(utils),\n        action: 'acceptAndClose'\n      });\n    }\n  }), [setDate, isOpen, utils, dateState, valueManager, value, parsedDateValue]); // Mobile keyboard view is a special case.\n  // When it's open picker should work like closed, because we are just showing text field\n\n  const [isMobileKeyboardViewOpen, setMobileKeyboardViewOpen] = React.useState(false);\n  const pickerProps = React.useMemo(() => ({\n    parsedValue: dateState.draft,\n    isMobileKeyboardViewOpen,\n    toggleMobileKeyboardView: () => setMobileKeyboardViewOpen(!isMobileKeyboardViewOpen),\n    onDateChange: (newDate, wrapperVariant, selectionState = 'partial') => {\n      switch (selectionState) {\n        case 'shallow':\n          {\n            // Update the `draft` state but do not fire `onChange`\n            return setDate({\n              action: 'setDraft',\n              value: newDate,\n              skipOnChangeCall: true\n            });\n          }\n\n        case 'partial':\n          {\n            // Update the `draft` state and fire `onChange`\n            return setDate({\n              action: 'setDraft',\n              value: newDate\n            });\n          }\n\n        case 'finish':\n          {\n            if (closeOnSelect != null ? closeOnSelect : wrapperVariant === 'desktop') {\n              // Set all dates in state to equal the new date and close picker.\n              return setDate({\n                value: newDate,\n                action: 'acceptAndClose'\n              });\n            } // Updates the `committed` state and fire `onChange`\n\n\n            return setDate({\n              value: newDate,\n              action: 'setCommitted'\n            });\n          }\n\n        default:\n          {\n            throw new Error('MUI: Invalid selectionState passed to `onDateChange`');\n          }\n      }\n    }\n  }), [setDate, isMobileKeyboardViewOpen, dateState.draft, closeOnSelect]);\n  const handleInputChange = React.useCallback((newParsedValue, keyboardInputValue) => {\n    const cleanParsedValue = valueManager.valueReducer ? valueManager.valueReducer(utils, lastValidDateValue, newParsedValue) : newParsedValue;\n    onChange(cleanParsedValue, keyboardInputValue);\n  }, [onChange, valueManager, lastValidDateValue, utils]);\n  const inputProps = React.useMemo(() => ({\n    onChange: handleInputChange,\n    open: isOpen,\n    rawValue: value,\n    openPicker: () => setIsOpen(true)\n  }), [handleInputChange, isOpen, value, setIsOpen]);\n  const pickerState = {\n    pickerProps,\n    inputProps,\n    wrapperProps\n  };\n  React.useDebugValue(pickerState, () => ({\n    MuiPickerState: {\n      dateState,\n      other: pickerState\n    }\n  }));\n  return pickerState;\n};"]},"metadata":{},"sourceType":"module"}