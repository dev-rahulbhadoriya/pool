{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useIsDayDisabled } from '../internals/hooks/validation/useDateValidation';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nexport const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {\n  switch (action.type) {\n    case 'changeMonth':\n      return _extends({}, state, {\n        slideDirection: action.direction,\n        currentMonth: action.newMonth,\n        isMonthSwitchingAnimating: !reduceAnimations\n      });\n\n    case 'finishMonthSwitchingAnimation':\n      return _extends({}, state, {\n        isMonthSwitchingAnimating: false\n      });\n\n    case 'changeFocusedDay':\n      {\n        if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {\n          return state;\n        }\n\n        const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);\n        return _extends({}, state, {\n          focusedDay: action.focusedDay,\n          isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations,\n          currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n          slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'\n        });\n      }\n\n    default:\n      throw new Error('missing support');\n  }\n};\nexport const useCalendarState = _ref2 => {\n  let {\n    date,\n    defaultCalendarMonth,\n    disableFuture,\n    disablePast,\n    disableSwitchToMonthOnDayFocus = false,\n    maxDate,\n    minDate,\n    onMonthChange,\n    reduceAnimations,\n    shouldDisableDate\n  } = _ref2;\n\n  var _ref;\n\n  const now = useNow();\n  const utils = useUtils();\n  const reducerFn = React.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;\n  const [calendarState, dispatch] = React.useReducer(reducerFn, {\n    isMonthSwitchingAnimating: false,\n    focusedDay: date || now,\n    currentMonth: utils.startOfMonth((_ref = date != null ? date : defaultCalendarMonth) != null ? _ref : now),\n    slideDirection: 'left'\n  });\n  const handleChangeMonth = React.useCallback(payload => {\n    dispatch(_extends({\n      type: 'changeMonth'\n    }, payload));\n\n    if (onMonthChange) {\n      onMonthChange(payload.newMonth);\n    }\n  }, [onMonthChange]);\n  const changeMonth = React.useCallback(newDate => {\n    const newDateRequested = newDate != null ? newDate : now;\n\n    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n      return;\n    }\n\n    handleChangeMonth({\n      newMonth: utils.startOfMonth(newDateRequested),\n      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'\n    });\n  }, [calendarState.currentMonth, handleChangeMonth, now, utils]);\n  const isDateDisabled = useIsDayDisabled({\n    shouldDisableDate,\n    minDate,\n    maxDate,\n    disableFuture,\n    disablePast\n  });\n  const onMonthSwitchingAnimationEnd = React.useCallback(() => {\n    dispatch({\n      type: 'finishMonthSwitchingAnimation'\n    });\n  }, []);\n  const changeFocusedDay = React.useCallback(newFocusedDate => {\n    if (!isDateDisabled(newFocusedDate)) {\n      dispatch({\n        type: 'changeFocusedDay',\n        focusedDay: newFocusedDate\n      });\n    }\n  }, [isDateDisabled]);\n  return {\n    calendarState,\n    changeMonth,\n    changeFocusedDay,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    handleChangeMonth\n  };\n};","map":{"version":3,"sources":["/home/rahul/Rahul_workspace/pool/node_modules/@mui/x-date-pickers/CalendarPicker/useCalendarState.js"],"names":["_extends","React","useIsDayDisabled","useUtils","useNow","createCalendarStateReducer","reduceAnimations","disableSwitchToMonthOnDayFocus","utils","state","action","type","slideDirection","direction","currentMonth","newMonth","isMonthSwitchingAnimating","focusedDay","isSameDay","needMonthSwitch","isSameMonth","startOfMonth","isAfterDay","Error","useCalendarState","date","defaultCalendarMonth","disableFuture","disablePast","maxDate","minDate","onMonthChange","shouldDisableDate","_ref","now","reducerFn","useRef","Boolean","current","calendarState","dispatch","useReducer","handleChangeMonth","useCallback","payload","changeMonth","newDate","newDateRequested","isDateDisabled","onMonthSwitchingAnimationEnd","changeFocusedDay","newFocusedDate"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useIsDayDisabled } from '../internals/hooks/validation/useDateValidation';\nimport { useUtils, useNow } from '../internals/hooks/useUtils';\nexport const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {\n  switch (action.type) {\n    case 'changeMonth':\n      return _extends({}, state, {\n        slideDirection: action.direction,\n        currentMonth: action.newMonth,\n        isMonthSwitchingAnimating: !reduceAnimations\n      });\n\n    case 'finishMonthSwitchingAnimation':\n      return _extends({}, state, {\n        isMonthSwitchingAnimating: false\n      });\n\n    case 'changeFocusedDay':\n      {\n        if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {\n          return state;\n        }\n\n        const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);\n        return _extends({}, state, {\n          focusedDay: action.focusedDay,\n          isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations,\n          currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,\n          slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'\n        });\n      }\n\n    default:\n      throw new Error('missing support');\n  }\n};\nexport const useCalendarState = ({\n  date,\n  defaultCalendarMonth,\n  disableFuture,\n  disablePast,\n  disableSwitchToMonthOnDayFocus = false,\n  maxDate,\n  minDate,\n  onMonthChange,\n  reduceAnimations,\n  shouldDisableDate\n}) => {\n  var _ref;\n\n  const now = useNow();\n  const utils = useUtils();\n  const reducerFn = React.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;\n  const [calendarState, dispatch] = React.useReducer(reducerFn, {\n    isMonthSwitchingAnimating: false,\n    focusedDay: date || now,\n    currentMonth: utils.startOfMonth((_ref = date != null ? date : defaultCalendarMonth) != null ? _ref : now),\n    slideDirection: 'left'\n  });\n  const handleChangeMonth = React.useCallback(payload => {\n    dispatch(_extends({\n      type: 'changeMonth'\n    }, payload));\n\n    if (onMonthChange) {\n      onMonthChange(payload.newMonth);\n    }\n  }, [onMonthChange]);\n  const changeMonth = React.useCallback(newDate => {\n    const newDateRequested = newDate != null ? newDate : now;\n\n    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {\n      return;\n    }\n\n    handleChangeMonth({\n      newMonth: utils.startOfMonth(newDateRequested),\n      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'\n    });\n  }, [calendarState.currentMonth, handleChangeMonth, now, utils]);\n  const isDateDisabled = useIsDayDisabled({\n    shouldDisableDate,\n    minDate,\n    maxDate,\n    disableFuture,\n    disablePast\n  });\n  const onMonthSwitchingAnimationEnd = React.useCallback(() => {\n    dispatch({\n      type: 'finishMonthSwitchingAnimation'\n    });\n  }, []);\n  const changeFocusedDay = React.useCallback(newFocusedDate => {\n    if (!isDateDisabled(newFocusedDate)) {\n      dispatch({\n        type: 'changeFocusedDay',\n        focusedDay: newFocusedDate\n      });\n    }\n  }, [isDateDisabled]);\n  return {\n    calendarState,\n    changeMonth,\n    changeFocusedDay,\n    isDateDisabled,\n    onMonthSwitchingAnimationEnd,\n    handleChangeMonth\n  };\n};"]},"metadata":{},"sourceType":"module"}