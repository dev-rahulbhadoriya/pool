{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletSDK = void 0;\n\nconst wallet_logo_1 = require(\"./assets/wallet-logo\");\n\nconst ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\n\nconst CoinbaseWalletProvider_1 = require(\"./provider/CoinbaseWalletProvider\");\n\nconst WalletSDKUI_1 = require(\"./provider/WalletSDKUI\");\n\nconst WalletSDKRelay_1 = require(\"./relay/WalletSDKRelay\");\n\nconst WalletSDKRelayEventManager_1 = require(\"./relay/WalletSDKRelayEventManager\");\n\nconst util_1 = require(\"./util\");\n\nconst LINK_API_URL = process.env.LINK_API_URL || \"https://www.walletlink.org\";\nconst SDK_VERSION = process.env.SDK_VERSION || require(\"../package.json\").version || \"unknown\";\n\nclass CoinbaseWalletSDK {\n  /**\n   * Constructor\n   * @param options Coinbase Wallet SDK constructor options\n   */\n  constructor(options) {\n    var _a, _b, _c;\n\n    this._appName = \"\";\n    this._appLogoUrl = null;\n    this._relay = null;\n    this._relayEventManager = null;\n    const linkAPIUrl = options.linkAPIUrl || LINK_API_URL;\n    let uiConstructor;\n\n    if (!options.uiConstructor) {\n      uiConstructor = opts => new WalletSDKUI_1.WalletSDKUI(opts);\n    } else {\n      uiConstructor = options.uiConstructor;\n    }\n\n    if (typeof options.overrideIsMetaMask === \"undefined\") {\n      this._overrideIsMetaMask = false;\n    } else {\n      this._overrideIsMetaMask = options.overrideIsMetaMask;\n    }\n\n    this._overrideIsCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n    this._overrideIsCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n\n    if (options.diagnosticLogger && options.eventListener) {\n      throw new Error(\"Can't have both eventListener and diagnosticLogger options, use only diagnosticLogger\");\n    }\n\n    if (options.eventListener) {\n      this._diagnosticLogger = {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        log: options.eventListener.onEvent\n      };\n    } else {\n      this._diagnosticLogger = options.diagnosticLogger;\n    }\n\n    this._reloadOnDisconnect = (_c = options.reloadOnDisconnect) !== null && _c !== void 0 ? _c : true;\n    const u = new URL(linkAPIUrl);\n    const origin = `${u.protocol}//${u.host}`;\n    this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(`-walletlink:${origin}`); // needs migration to preserve local states\n\n    this._storage.setItem(\"version\", CoinbaseWalletSDK.VERSION);\n\n    if (this.walletExtension || this.coinbaseBrowser) {\n      return;\n    }\n\n    this._relayEventManager = new WalletSDKRelayEventManager_1.WalletSDKRelayEventManager();\n    this._relay = new WalletSDKRelay_1.WalletSDKRelay({\n      linkAPIUrl,\n      version: SDK_VERSION,\n      darkMode: !!options.darkMode,\n      uiConstructor,\n      storage: this._storage,\n      relayEventManager: this._relayEventManager,\n      diagnosticLogger: this._diagnosticLogger\n    });\n    this.setAppInfo(options.appName, options.appLogoUrl);\n    if (!!options.headlessMode) return;\n\n    this._relay.attachUI();\n  }\n  /**\n   * Create a Web3 Provider object\n   * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n   * @param chainId Ethereum Chain ID (Default: 1)\n   * @returns A Web3 Provider\n   */\n\n\n  makeWeb3Provider() {\n    let jsonRpcUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    const extension = this.walletExtension;\n\n    if (extension) {\n      if (!this.isCipherProvider(extension)) {\n        extension.setProviderInfo(jsonRpcUrl, chainId);\n      }\n\n      if (this._reloadOnDisconnect === false && typeof extension.disableReloadOnDisconnect === \"function\") extension.disableReloadOnDisconnect();\n      return extension;\n    }\n\n    const dappBrowser = this.coinbaseBrowser;\n\n    if (dappBrowser) {\n      return dappBrowser;\n    }\n\n    const relay = this._relay;\n\n    if (!relay || !this._relayEventManager || !this._storage) {\n      throw new Error(\"Relay not initialized, should never happen\");\n    }\n\n    if (!jsonRpcUrl) relay.setConnectDisabled(true);\n    return new CoinbaseWalletProvider_1.CoinbaseWalletProvider({\n      relayProvider: () => Promise.resolve(relay),\n      relayEventManager: this._relayEventManager,\n      storage: this._storage,\n      jsonRpcUrl,\n      chainId,\n      qrUrl: this.getQrUrl(),\n      diagnosticLogger: this._diagnosticLogger,\n      overrideIsMetaMask: this._overrideIsMetaMask,\n      overrideIsCoinbaseWallet: this._overrideIsCoinbaseWallet,\n      overrideIsCoinbaseBrowser: this._overrideIsCoinbaseBrowser\n    });\n  }\n  /**\n   * Set application information\n   * @param appName Application name\n   * @param appLogoUrl Application logo image URL\n   */\n\n\n  setAppInfo(appName, appLogoUrl) {\n    var _a;\n\n    this._appName = appName || \"DApp\";\n    this._appLogoUrl = appLogoUrl || (0, util_1.getFavicon)();\n    const extension = this.walletExtension;\n\n    if (extension) {\n      if (!this.isCipherProvider(extension)) {\n        extension.setAppInfo(this._appName, this._appLogoUrl);\n      }\n    } else {\n      (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n    }\n  }\n  /**\n   * Disconnect. After disconnecting, this will reload the web page to ensure\n   * all potential stale state is cleared.\n   */\n\n\n  disconnect() {\n    var _a;\n\n    const extension = this.walletExtension;\n\n    if (extension) {\n      void extension.close();\n    } else {\n      (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n    }\n  }\n  /**\n   * Return QR URL for mobile wallet connection, will return null if extension is installed\n   */\n\n\n  getQrUrl() {\n    var _a, _b;\n\n    return (_b = (_a = this._relay) === null || _a === void 0 ? void 0 : _a.getQRCodeUrl()) !== null && _b !== void 0 ? _b : null;\n  }\n  /**\n   * Official Coinbase Wallet logo for developers to use on their frontend\n   * @param type Type of wallet logo: \"standard\" | \"circle\" | \"text\" | \"textWithLogo\" | \"textLight\" | \"textWithLogoLight\"\n   * @param width Width of the logo (Optional)\n   * @returns SVG Data URI\n   */\n\n\n  getCoinbaseWalletLogo(type) {\n    let width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 240;\n    return (0, wallet_logo_1.walletLogo)(type, width);\n  }\n\n  get walletExtension() {\n    var _a;\n\n    return (_a = window.coinbaseWalletExtension) !== null && _a !== void 0 ? _a : window.walletLinkExtension;\n  }\n\n  get coinbaseBrowser() {\n    var _a, _b;\n\n    try {\n      // Coinbase DApp browser does not inject into iframes so grab provider from top frame if it exists\n      const ethereum = (_a = window.ethereum) !== null && _a !== void 0 ? _a : (_b = window.top) === null || _b === void 0 ? void 0 : _b.ethereum;\n\n      if (!ethereum) {\n        return undefined;\n      }\n\n      if (\"isCoinbaseBrowser\" in ethereum && ethereum.isCoinbaseBrowser) {\n        return ethereum;\n      } else {\n        return undefined;\n      }\n    } catch (e) {\n      return undefined;\n    }\n  }\n\n  isCipherProvider(provider) {\n    // @ts-expect-error isCipher walletlink property\n    return typeof provider.isCipher === \"boolean\" && provider.isCipher;\n  }\n\n}\n\nexports.CoinbaseWalletSDK = CoinbaseWalletSDK;\nCoinbaseWalletSDK.VERSION = SDK_VERSION;","map":{"version":3,"sources":["/home/rahul/Rahul_workspace/pool/node_modules/@coinbase/wallet-sdk/dist/CoinbaseWalletSDK.js"],"names":["Object","defineProperty","exports","value","CoinbaseWalletSDK","wallet_logo_1","require","ScopedLocalStorage_1","CoinbaseWalletProvider_1","WalletSDKUI_1","WalletSDKRelay_1","WalletSDKRelayEventManager_1","util_1","LINK_API_URL","process","env","SDK_VERSION","version","constructor","options","_a","_b","_c","_appName","_appLogoUrl","_relay","_relayEventManager","linkAPIUrl","uiConstructor","opts","WalletSDKUI","overrideIsMetaMask","_overrideIsMetaMask","_overrideIsCoinbaseWallet","overrideIsCoinbaseWallet","_overrideIsCoinbaseBrowser","overrideIsCoinbaseBrowser","diagnosticLogger","eventListener","Error","_diagnosticLogger","log","onEvent","_reloadOnDisconnect","reloadOnDisconnect","u","URL","origin","protocol","host","_storage","ScopedLocalStorage","setItem","VERSION","walletExtension","coinbaseBrowser","WalletSDKRelayEventManager","WalletSDKRelay","darkMode","storage","relayEventManager","setAppInfo","appName","appLogoUrl","headlessMode","attachUI","makeWeb3Provider","jsonRpcUrl","chainId","extension","isCipherProvider","setProviderInfo","disableReloadOnDisconnect","dappBrowser","relay","setConnectDisabled","CoinbaseWalletProvider","relayProvider","Promise","resolve","qrUrl","getQrUrl","getFavicon","disconnect","close","resetAndReload","getQRCodeUrl","getCoinbaseWalletLogo","type","width","walletLogo","window","coinbaseWalletExtension","walletLinkExtension","ethereum","top","undefined","isCoinbaseBrowser","e","provider","isCipher"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinbaseWalletSDK = void 0;\nconst wallet_logo_1 = require(\"./assets/wallet-logo\");\nconst ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\nconst CoinbaseWalletProvider_1 = require(\"./provider/CoinbaseWalletProvider\");\nconst WalletSDKUI_1 = require(\"./provider/WalletSDKUI\");\nconst WalletSDKRelay_1 = require(\"./relay/WalletSDKRelay\");\nconst WalletSDKRelayEventManager_1 = require(\"./relay/WalletSDKRelayEventManager\");\nconst util_1 = require(\"./util\");\nconst LINK_API_URL = process.env.LINK_API_URL || \"https://www.walletlink.org\";\nconst SDK_VERSION = process.env.SDK_VERSION || require(\"../package.json\").version || \"unknown\";\nclass CoinbaseWalletSDK {\n    /**\n     * Constructor\n     * @param options Coinbase Wallet SDK constructor options\n     */\n    constructor(options) {\n        var _a, _b, _c;\n        this._appName = \"\";\n        this._appLogoUrl = null;\n        this._relay = null;\n        this._relayEventManager = null;\n        const linkAPIUrl = options.linkAPIUrl || LINK_API_URL;\n        let uiConstructor;\n        if (!options.uiConstructor) {\n            uiConstructor = opts => new WalletSDKUI_1.WalletSDKUI(opts);\n        }\n        else {\n            uiConstructor = options.uiConstructor;\n        }\n        if (typeof options.overrideIsMetaMask === \"undefined\") {\n            this._overrideIsMetaMask = false;\n        }\n        else {\n            this._overrideIsMetaMask = options.overrideIsMetaMask;\n        }\n        this._overrideIsCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n        this._overrideIsCoinbaseBrowser =\n            (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n        if (options.diagnosticLogger && options.eventListener) {\n            throw new Error(\"Can't have both eventListener and diagnosticLogger options, use only diagnosticLogger\");\n        }\n        if (options.eventListener) {\n            this._diagnosticLogger = {\n                // eslint-disable-next-line @typescript-eslint/unbound-method\n                log: options.eventListener.onEvent,\n            };\n        }\n        else {\n            this._diagnosticLogger = options.diagnosticLogger;\n        }\n        this._reloadOnDisconnect = (_c = options.reloadOnDisconnect) !== null && _c !== void 0 ? _c : true;\n        const u = new URL(linkAPIUrl);\n        const origin = `${u.protocol}//${u.host}`;\n        this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(`-walletlink:${origin}`); // needs migration to preserve local states\n        this._storage.setItem(\"version\", CoinbaseWalletSDK.VERSION);\n        if (this.walletExtension || this.coinbaseBrowser) {\n            return;\n        }\n        this._relayEventManager = new WalletSDKRelayEventManager_1.WalletSDKRelayEventManager();\n        this._relay = new WalletSDKRelay_1.WalletSDKRelay({\n            linkAPIUrl,\n            version: SDK_VERSION,\n            darkMode: !!options.darkMode,\n            uiConstructor,\n            storage: this._storage,\n            relayEventManager: this._relayEventManager,\n            diagnosticLogger: this._diagnosticLogger,\n        });\n        this.setAppInfo(options.appName, options.appLogoUrl);\n        if (!!options.headlessMode)\n            return;\n        this._relay.attachUI();\n    }\n    /**\n     * Create a Web3 Provider object\n     * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n     * @param chainId Ethereum Chain ID (Default: 1)\n     * @returns A Web3 Provider\n     */\n    makeWeb3Provider(jsonRpcUrl = \"\", chainId = 1) {\n        const extension = this.walletExtension;\n        if (extension) {\n            if (!this.isCipherProvider(extension)) {\n                extension.setProviderInfo(jsonRpcUrl, chainId);\n            }\n            if (this._reloadOnDisconnect === false &&\n                typeof extension.disableReloadOnDisconnect === \"function\")\n                extension.disableReloadOnDisconnect();\n            return extension;\n        }\n        const dappBrowser = this.coinbaseBrowser;\n        if (dappBrowser) {\n            return dappBrowser;\n        }\n        const relay = this._relay;\n        if (!relay || !this._relayEventManager || !this._storage) {\n            throw new Error(\"Relay not initialized, should never happen\");\n        }\n        if (!jsonRpcUrl)\n            relay.setConnectDisabled(true);\n        return new CoinbaseWalletProvider_1.CoinbaseWalletProvider({\n            relayProvider: () => Promise.resolve(relay),\n            relayEventManager: this._relayEventManager,\n            storage: this._storage,\n            jsonRpcUrl,\n            chainId,\n            qrUrl: this.getQrUrl(),\n            diagnosticLogger: this._diagnosticLogger,\n            overrideIsMetaMask: this._overrideIsMetaMask,\n            overrideIsCoinbaseWallet: this._overrideIsCoinbaseWallet,\n            overrideIsCoinbaseBrowser: this._overrideIsCoinbaseBrowser,\n        });\n    }\n    /**\n     * Set application information\n     * @param appName Application name\n     * @param appLogoUrl Application logo image URL\n     */\n    setAppInfo(appName, appLogoUrl) {\n        var _a;\n        this._appName = appName || \"DApp\";\n        this._appLogoUrl = appLogoUrl || (0, util_1.getFavicon)();\n        const extension = this.walletExtension;\n        if (extension) {\n            if (!this.isCipherProvider(extension)) {\n                extension.setAppInfo(this._appName, this._appLogoUrl);\n            }\n        }\n        else {\n            (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n        }\n    }\n    /**\n     * Disconnect. After disconnecting, this will reload the web page to ensure\n     * all potential stale state is cleared.\n     */\n    disconnect() {\n        var _a;\n        const extension = this.walletExtension;\n        if (extension) {\n            void extension.close();\n        }\n        else {\n            (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n        }\n    }\n    /**\n     * Return QR URL for mobile wallet connection, will return null if extension is installed\n     */\n    getQrUrl() {\n        var _a, _b;\n        return (_b = (_a = this._relay) === null || _a === void 0 ? void 0 : _a.getQRCodeUrl()) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * Official Coinbase Wallet logo for developers to use on their frontend\n     * @param type Type of wallet logo: \"standard\" | \"circle\" | \"text\" | \"textWithLogo\" | \"textLight\" | \"textWithLogoLight\"\n     * @param width Width of the logo (Optional)\n     * @returns SVG Data URI\n     */\n    getCoinbaseWalletLogo(type, width = 240) {\n        return (0, wallet_logo_1.walletLogo)(type, width);\n    }\n    get walletExtension() {\n        var _a;\n        return (_a = window.coinbaseWalletExtension) !== null && _a !== void 0 ? _a : window.walletLinkExtension;\n    }\n    get coinbaseBrowser() {\n        var _a, _b;\n        try {\n            // Coinbase DApp browser does not inject into iframes so grab provider from top frame if it exists\n            const ethereum = ((_a = window.ethereum) !== null && _a !== void 0 ? _a : (_b = window.top) === null || _b === void 0 ? void 0 : _b.ethereum);\n            if (!ethereum) {\n                return undefined;\n            }\n            if (\"isCoinbaseBrowser\" in ethereum && ethereum.isCoinbaseBrowser) {\n                return ethereum;\n            }\n            else {\n                return undefined;\n            }\n        }\n        catch (e) {\n            return undefined;\n        }\n    }\n    isCipherProvider(provider) {\n        // @ts-expect-error isCipher walletlink property\n        return typeof provider.isCipher === \"boolean\" && provider.isCipher;\n    }\n}\nexports.CoinbaseWalletSDK = CoinbaseWalletSDK;\nCoinbaseWalletSDK.VERSION = SDK_VERSION;\n"]},"metadata":{},"sourceType":"script"}