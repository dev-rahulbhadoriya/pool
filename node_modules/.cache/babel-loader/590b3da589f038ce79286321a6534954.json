{"ast":null,"code":"import max from \"./max.js\";\nimport maxIndex from \"./maxIndex.js\";\nimport min from \"./min.js\";\nimport minIndex from \"./minIndex.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, { numbers } from \"./number.js\";\nimport { ascendingDefined } from \"./sort.js\";\nimport greatest from \"./greatest.js\";\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\nexport function quantileSorted(values, p) {\n  let valueof = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : number;\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\nexport function quantileIndex(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return minIndex(values);\n  if (p >= 1) return maxIndex(values);\n\n  var n,\n      i = Math.floor((n - 1) * p),\n      order = (i, j) => ascendingDefined(values[i], values[j]),\n      index = quickselect(Uint32Array.from(values, (_, i) => i), i, 0, n - 1, order);\n\n  return greatest(index.subarray(0, i + 1), i => values[i]);\n}","map":{"version":3,"sources":["/home/rahul/Rahul_workspace/pool/node_modules/d3-array/src/quantile.js"],"names":["max","maxIndex","min","minIndex","quickselect","number","numbers","ascendingDefined","greatest","quantile","values","p","valueof","Float64Array","from","n","length","i","i0","Math","floor","value0","subarray","value1","quantileSorted","quantileIndex","order","j","index","Uint32Array","_"],"mappings":"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","sourcesContent":["import max from \"./max.js\";\nimport maxIndex from \"./maxIndex.js\";\nimport min from \"./min.js\";\nimport minIndex from \"./minIndex.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\nimport {ascendingDefined} from \"./sort.js\";\nimport greatest from \"./greatest.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileIndex(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return minIndex(values);\n  if (p >= 1) return maxIndex(values);\n  var n,\n      i = Math.floor((n - 1) * p),\n      order = (i, j) => ascendingDefined(values[i], values[j]),\n      index = quickselect(Uint32Array.from(values, (_, i) => i), i, 0, n - 1, order);\n  return greatest(index.subarray(0, i + 1), i => values[i]);\n}\n"]},"metadata":{},"sourceType":"module"}